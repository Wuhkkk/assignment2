// Specification for a Smart Parking System (Well Separated Design)
spec Spec_Unreal

// Define the type for number of cars (0 to 10 parking spots)
type NumCars = Int(0..10); // Maximum number of parking spots is 10

env boolean carAtEntrance;     // Is there a car waiting at the entrance?
env boolean carAtExit;         // Is there a car waiting at the exit?
env NumCars availableSpots;    // Current number of available parking spots

sys boolean openEntranceGate;  // Control the opening/closing of the entrance gate
sys boolean openExitGate;      // Control the opening/closing of the exit gate
sys NumCars assignedSpot;      // Parking spot assigned to a new arriving car (0~9)

asm ini !openEntranceGate;        // Entrance gate is initially closed
asm ini !openExitGate;            // Exit gate is initially closed

asm alw carAtExit -> next(carAtExit); // If a car is at the exit, it may still be there in the next step
asm alw availableSpots >= 0 & availableSpots <= 10; // Available spots must remain within valid range

// FIX
//asm alwEv (availableSpots > 0 -> carAtEntrance);  // If there are available spots, eventually a car will arrive at the entrance
asm alwEv (carAtExit -> availableSpots < 10);     // If there is a car at the exit, eventually there will be space to park
gar ini assignedSpot = 0;          // Initially no spot is assigned, default is 0

gar alw openEntranceGate -> availableSpots > 0; // Only allow entrance gate to open if there are available spots
gar alw openEntranceGate -> next(openEntranceGate = false); // The entrance gate opens only for one time unit and then closes
gar alw openExitGate -> next(openExitGate = false); // Similarly for the exit gate

gar alwEv (availableSpots > 0 -> carAtEntrance);
gar alwEv (!openEntranceGate -> (availableSpots > 0 -> carAtEntrance)); 
gar alwEv (!openExitGate -> carAtExit);